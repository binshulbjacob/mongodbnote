
<----------------------------------------------------------------------database create----------------------------------------------------------------------->


var MongoClient = require('mongodb').MongoClient;
var url = "mongodb://127.0.0.1/mydb";

MongoClient.connect(url,function(err,db){
 if(err) throw  err;
 console.log("Database created");
 db.close();
});








<-----------------------------------------------------------------------------------create collection---------------------------------------------------------->


var MongoClient = require('mongodb').MongoClient;
var url = "mongodb://localhost:27017/";

MongoClient.connect(url, function(err, db) {
  if (err) throw err;
  var dbo = db.db("mydb");
  dbo.createCollection("customers", function(err, res) {
    if (err) throw err;
    console.log("Collection created!");
    db.close();
  });
});


<-------------------------------------------------------------------------------insert 1 collection--------------------------------------------------------->.


 Insert Into Collection
To insert a record, or document as it is called in MongoDB, 
into a collection, we use the insertOne() method.

var MongoClient = require('mongodb').MongoClient;
var url = "mongodb://localhost:27017/";

MongoClient.connect(url, function(err, db) {
  if (err) throw err;
  var dbo = db.db("mydb");
  var myobj = { name: "Rahul", address: "Rahul Bhavan" };
  dbo.collection("customers").insertOne(myobj, function(err, res) {
    if (err) throw err;
    console.log("1 document inserted");
    db.close();
  });
});


<-------------------------------------------------------------------------------insertmany------------------------------------------------------------------->


Insert Multiple Documents
To insert multiple documents into a collection in MongoDB, 
we use the insertMany() method.

var MongoClient = require('mongodb').MongoClient;
var url = "mongodb://localhost:27017/";

MongoClient.connect(url, function(err, db) {
  if (err) throw err;
  var dbo = db.db("mydb");
  var myobj = [
    { name: 'Rahul', address: 'Rahul Bhavan'},
    { name: 'Manu', address: 'Manu Villa'},
    { name: 'Vishnu', address: 'Vishnu Bhavan'},
    { name: 'Akash', address: 'Akash Villa'},

  ];
  dbo.collection("customers").insertMany(myobj, function(err, res) {
    if (err) throw err;
    console.log("Documents inserted");
    db.close();
  });
});

                                <--------------------------------------find one/////find all//// findsome///// find any of the one from that------------------------------------------->
Node.js MongoDB Find 

Find One
To select data from a collection in MongoDB, 
we can use the findOne() method.

The findOne() method returns the first occurrence in the selection.

The first parameter of the findOne() method is a query object. 
In this example we use an empty query object, 
which selects all documents in a collection 
(but returns only the first document).

var MongoClient = require('mongodb').MongoClient;
var url = "mongodb://127.0.0.1:27017/";

MongoClient.connect(url, function(err, db) {
  if (err) throw err;
  var dbo = db.db("mydb");
  dbo.collection("customers").findOne({}, function(err, result) {
    if (err) throw err;
    console.log(result.name);
    db.close();
  });
});

Find All
To select data from a table in MongoDB,
we can also use the find() method.

The find() method returns all occurrences in the selection.

The first parameter of the find() method is a query object. 
In this example we use an empty query object, 
which selects all documents in the collection.

var MongoClient = require('mongodb').MongoClient;
var url = "mongodb://127.0.0.1:27017/";

MongoClient.connect(url, function(err, db) {
  if (err) throw err;
  var dbo = db.db("mydb");
  dbo.collection("customers").find({}).toArray(function(err, result) {
    if (err) throw err;
    console.log(result);
    db.close();
  });
});

Find Some
The second parameter of the find() method is the
projection object that describes which fields to include in the result.

This parameter is optional, and if omitted,
all fields will be included in the result.

var MongoClient = require('mongodb').MongoClient;
var url = "mongodb://localhost:27017/";

MongoClient.connect(url, function(err, db) {
  if (err) throw err;
  var dbo = db.db("mydb");
  dbo.collection("customers").find({}, 
  { projection: { _id: 0, name: 1, address: 1 } }).
  toArray(function(err, result) {
    if (err) throw err;
    console.log(result);
    db.close();
  });
});



console.log(result[2].address);


<-------------------------------------------------------------------------------quary------method------------------------------------------------------>

var MongoClient = require('mongodb').MongoClient;
var url = "mongodb://localhost:27017/";

MongoClient.connect(url, function(err, db) {
  if (err) throw err;
  var dbo = db.db("mydb");
  var query = { address: "Rahul Bhavan" };
  dbo.collection("customers").find(query).toArray(function(err, result) {
    if (err) throw err;
    console.log(result);
    db.close();
  });
});



<------------------------------------------------------------------------------- ascending or descendiorder------------------------------------------------------>
Sort the Result
Use the sort() 
method to sort the result in ascending or descending order.

The sort() method takes one parameter, 
an object defining the sorting order.

var MongoClient = require('mongodb').MongoClient;
var url = "mongodb://localhost:27017/";

MongoClient.connect(url, function(err, db) {
  if (err) throw err;
  var dbo = db.db("mydb");
  var mysort = { name: 1 };
  dbo.collection("customers").find().sort(mysort).toArray(function(err, result) {
    if (err) throw err;
    console.log(result);
    db.close();
  });
});


var MongoClient = require('mongodb').MongoClient;
var url = "mongodb://localhost:27017/";

MongoClient.connect(url, function(err, db) {
  if (err) throw err;
  var dbo = db.db("mydb");
  var mysort = { name: -1 };
  dbo.collection("customers").find().sort(mysort).toArray(function(err, result) {
    if (err) throw err;
    console.log(result);
    db.close();
  });
});


<------------------------------------------------------------------------limit----------------find any five lie that---------------------------------------------------------------------->


Node.js MongoDB Limit
To limit the result in MongoDB, we use the limit() method.
The limit() method takes one parameter, 
a number defining how many documents to return.

var MongoClient = require('mongodb').MongoClient;
var url = "mongodb://127.0.0.1:27017/";

MongoClient.connect(url, function(err, db) {
  if (err) throw err;
  var dbo = db.db("mydb");
  dbo.collection("customers").find().limit(5).toArray(function(err, result) {
    if (err) throw err;
    console.log(result);
    db.close();
  });
});




<------------------------------------------------------------------------DELETE ONE AND MANY ------------------------------------------------------------------------------>



Node.js MongoDB Delete

Delete Document
To delete a record, or document as it is called in MongoDB, 
we use the deleteOne() method.
Delete Many
To delete more than one document, use the deleteMany() method.

var MongoClient = require('mongodb').MongoClient;
var url = "mongodb://localhost:27017/";

MongoClient.connect(url, function(err, db) {
  if (err) throw err;
  var dbo = db.db("mydb");
  var myquery = { address: 'Manu Bhavan' };
  dbo.collection("customers").deleteOne(myquery, function(err, obj) {
    if (err) throw err;
    console.log("1 document deleted");
    db.close();
  });
});


var MongoClient = require('mongodb').MongoClient;
var url = "mongodb://127.0.0.1:27017/";

MongoClient.connect(url, function(err, db) {
  if (err) throw err;
  var dbo = db.db("mydb");
  var myquery = { address: 'bhavan' };
  dbo.collection("customers").deleteMany(myquery, function(err, obj) {
    if (err) throw err;
    console.log(obj.result.n + " document(s) deleted");
    db.close();
  });
});


<------------------------------------------------------------------------------------update one updatemany------------------------------->



Node.js Mongodb Update
Update Document
You can update a record, or document as it is called in MongoDB, 
by using the updateOne() method.

The first parameter of the updateOne() method is a 
query object defining which document to update.

var MongoClient = require('mongodb').MongoClient;
var url = "mongodb://127.0.0.1:27017/";

MongoClient.connect(url, function(err, db) {
  if (err) throw err;
  var dbo = db.db("mydb");
  var myquery = { address: "Manu Bhavan" };
  var newvalues = { $set: {name: "Vishnu", address: "Vishnu Bhavan" } };
  dbo.collection("customers").updateOne(myquery, newvalues, function(err, res) {
    if (err) throw err;
    console.log("1 document updated");
    db.close();
  });
});


var MongoClient = require('mongodb').MongoClient;
var url = "mongodb://127.0.0.1:27017/";

MongoClient.connect(url, function(err, db) {
  if (err) throw err;
  var dbo = db.db("mydb");
  var myquery = { address: 'Manu Bhavan' };
  var newvalues = {$set: {name: "Mahesh"} };
  dbo.collection("customers").updateMany(myquery, newvalues, function(err, res) {
    if (err) throw err;
    console.log(res.result.nModified + " document(s) updated");
    db.close();
  });
});



<---------------------------------------------------------------------twodatabase/pages---------------MongoDB Join------------------------------------------------------------------------>

Node.js MongoDB Join

var MongoClient = require('mongodb').MongoClient;
var url = "mongodb://127.0.0.1:27017/";

MongoClient.connect(url, function(err, db) {
  if (err) throw err;
  var dbo = db.db("mydb");
  dbo.collection('orders').aggregate([
    { $lookup:
       {
         from: 'products',
         localField: 'product_id',
         foreignField: '_id',
         as: 'orderdetails'
       }
     }
    ]).toArray(function(err, res) {
    if (err) throw err;
    console.log(JSON.stringify(res));
    db.close();
  });
});


<---------------------------------------------------------------------drop/--/deletecollection--------------------------------------------------------------------------------------------->


Node.js MongoDB Drop

Drop Collection
You can delete a table, or collection as it is called in MongoDB, 
by using the drop() method.

var MongoClient = require('mongodb').MongoClient;
var url = "mongodb://127.0.0.1:27017/";

MongoClient.connect(url, function(err, db) {
  if (err) throw err;
  var dbo = db.db("mydb");
  dbo.collection("customers").drop(function(err, delOK) {
    if (err) throw err;
    if (delOK) console.log("Collection deleted");
    db.close();
  });
});

